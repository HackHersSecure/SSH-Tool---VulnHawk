import nmap
import socket
import sys  # Import sys to handle exit
import time  # Import time for adding delays

# Function to scan the target host for open SSH ports
def scan_specific_host(host):
    scanner = nmap.PortScanner()
    print(f"\n[+] Scanning host: {host}")
    
    try:
        # Scan only the SSH port (22) with verbose output
        scanner.scan(host, '22', '-T4 -v')
        
        # Debugging: print the raw Nmap scan results
        print(f"[DEBUG] Raw Nmap Scan Output: {scanner[host]}")

        if host not in scanner.all_hosts():
            print(f"[!] No scan results for host: {host}. The host might be down or unreachable.")
            return []

        open_ports = []
        for proto in scanner[host].all_protocols():
            ports = scanner[host][proto].keys()
            for port in ports:
                port_state = scanner[host][proto][port]['state']
                if port_state == 'open':
                    open_ports.append(port)
                    print(f"[+] Open port: {port}/{proto} - {scanner[host][proto][port]['name']}")
        
        return open_ports
    except Exception as e:
        print(f"[!] Error during scan: {e}")
        return []

# Function to perform banner grabbing on open ports to identify services
def banner_grabbing(host, port):
    try:
        print(f"\n[+] Attempting banner grab on {host}:{port}")
        s = socket.socket()
        s.connect((host, port))
        s.send(b'Hello\r\n')
        banner = s.recv(1024)
        s.close()
        print(f"[+] Banner: {banner.decode().strip()}")
        return banner.decode().strip()
    except Exception as e:
        print(f"[!] Banner grabbing failed: {e}")
        return None

# Main function to handle the vulnerability scanning process
def main():
    print("Starting Vulnerability Scanner...")
    
    host = input("Enter the target host IP: ")
    
    # Scan the host for open SSH ports
    open_ports = scan_specific_host(host)
    
    if not open_ports:
        print(f"[!] No open ports found on {host} or the host is unreachable.")
        return
    
    # Perform banner grabbing on identified open ports
    for port in open_ports:
        banner = banner_grabbing(host, port)
        if banner and "SSH" in banner:
            print(f"[+] Possible SSH service detected on {host}:{port}.")
    
    print("\nVulnerability Scanner Completed.")
    time.sleep(2)  # Adding delay to observe the output

if __name__ == "__main__":
    main()
